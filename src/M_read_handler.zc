#import "Object"

/**
 * @class M_read_handler
 * @brief File handler for making file read operations more intuitive
 */
object M_read_handler implements Object {
    /**
     * @param fd -> The current file descriptor
     * @param filepath -> The name of the file to read from
     */
    fields {
        FILE *fd;
        char *filepath;
    }

    /**
     * @message: "file does not exist"
     * @brief Check if the path file exists in the filesystem
     * @return true if it does not exist
     */
    (bool) self |> "file does not exist" |> {
        /* Try to open for reading */
        FILE *f;
        if((f = fopen(self->filepath, "r"))) {
            fclose(f);
            return false;
        }
        printf("File: `%s` does not exist\n", self->filepath);
        return true;
    }

    init {}

    /**
     * @message: "reader open"
     * @brief Open a file in read mode
     * @param filepath -> The path to open
     * @return a boolean signaling if the opening was successful
     */
    (bool) self |> "reader open" |> (char*): filepath |> {
        self->filepath = filepath;

        if(self "file does not exist") return false;
        
        if(!(self->fd = fopen(self->filepath, "r"))) {
            printf("Error on reading file: `%s`\n", self->filepath);
            return false;
        }
        return true;
    }

    /**
     * @message: "read line"
     * @brief Read a new line from the file descriptor
     * @return The line read
     */
    (char*) self |> "read line" |> {
        char *ret;
        size_t line_len;
        char buf[2];

        size_t len = sizeof(buf);
        char *line = (char*)malloc(len);
        if(line == NULL) {
            printf("Error on allocating memory for the buffer\n");
            return "";
        }
        line[0] = '\0';

        while(fgets(buf, sizeof(buf), self->fd) != NULL) {
            /* Resize when necessary */
            if(len - strlen(line) < sizeof(buf)) {
                len *= 2;
                if((line = realloc(line, len)) == NULL) {
                    printf("Error on reallocating space for a bigger buffer\n");
                    free(line);
                    return "";
                }
            }

            /* Append the buffer to the end of the line */
            strcat(line, buf);

            /* Reduce the buffer to the first line */
            line_len = strlen(line);
            if(line[line_len - 1] == '\n') {
                ret = (char*)malloc(sizeof(char) * line_len);
                strcpy(ret, line);
                free(line);
                ret[line_len - 1] = '\0';
                return ret;
            }
        }

        return line;
    }

    /**
     * @message: "reader close"
     * @brief Attempts to close the buffers to avoid memory overflows
     */
    (bool) self |> "reader close" |> {
        if((fclose(self->fd))) {
            printf("Error on closing file: `%s`\n", self->filepath);
            return false;
        }
        return true;
    }
}
